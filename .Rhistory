p = ''.join([random.choice('ACGT') for _ in range(24)])
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
naive_2mm(p, t)
p = ''.join([random.choice('ACGT') for _ in range(24)])
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
for match_ind in res:
# verify match
ind = match_ind-i
print(p)
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
p = ''.join([random.choice('ACGT') for _ in range(24)])
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
for match_ind in res:
# verify match
ind = match_ind-i
print(p)
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
naive_2mm(p, t)
p = ''.join([random.choice('ACGT') for _ in range(24)])
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
for match_ind in res:
# verify match
ind = match_ind-i
print(p)
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
naive_2mm(p, t)
p = ''.join([random.choice('ACGT') for _ in range(24)])
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
for match_ind in res:
# verify match
ind = match_ind-i
print(p)
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
naive_2mm(p, t)
p = ''.join([random.choice('ACGT') for _ in range(24)])
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
for match_ind in res:
# verify match
ind = match_ind-i
print(p)
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
naive_2mm(p, t)
p = ''.join([random.choice('ACGT') for _ in range(24)])
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
for match_ind in res:
# verify match
ind = match_ind-i
print(p)
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
naive_2mm(p, t)
p = ''.join([random.choice('ACGT') for _ in range(24)])
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
naive_2mm(p, t)
p = t[0:8]
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
naive_2mm(p, t)
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
len(naive_2mm(p, t)) >=1
def build_index_and_call_pattern(p, t):
# create an index of 8-mers for the text
index = Index(t, 8)
# now for each 8 mer in a length 24 pattern we will query the data
# we are allowing up to 2 mismatches, so we must match at least one
# of the 3 8-mer partitions in the 24 bp pattern
# for testing
from python.assignment_1 import naive_2mm
p = ''.join([random.choice('ACGT') for _ in range(24)])
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
kmer_in_index = True
if kmer_in_index:
print('hit!')
len(naive_2mm(p, t)) >=1
build_index_and_call_pattern('GGCGCGGTGGCTCACGCCTGTAAT', t)
def build_index_and_call_pattern(p, t):
# create an index of 8-mers for the text
index = Index(t, 8)
# now for each 8 mer in a length 24 pattern we will query the data
# we are allowing up to 2 mismatches, so we must match at least one
# of the 3 8-mer partitions in the 24 bp pattern
# for testing
from python.assignment_1 import naive_2mm
p = ''.join([random.choice('ACGT') for _ in range(24)])
hit_counts = 0
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
hit_counts += 1
print('Indexed hit counts: ', hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)))
build_index_and_call_pattern('GGCGCGGTGGCTCACGCCTGTAAT', t)
t
def build_index_and_call_pattern(p, t):
# create an index of 8-mers for the text
index = Index(t, 8)
# now for each 8 mer in a length 24 pattern we will query the data
# we are allowing up to 2 mismatches, so we must match at least one
# of the 3 8-mer partitions in the 24 bp pattern
# for testing
from python.assignment_1 import naive_2mm
p = ''.join([random.choice('ACGT') for _ in range(24)])
hit_counts = 0
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
hit_counts += 1
print('Indexed hit counts: ', hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)[0]))
t = ''.join(read_fastq('data/week_2_hw.fasta')[0])
build_index_and_call_pattern('GGCGCGGTGGCTCACGCCTGTAAT', t)
naive_2mm(p, t)
naive_2mm(p, t)[0]
naive_2mm(p, t))
def build_index_and_call_pattern(p, t):
# create an index of 8-mers for the text
index = Index(t, 8)
# now for each 8 mer in a length 24 pattern we will query the data
# we are allowing up to 2 mismatches, so we must match at least one
# of the 3 8-mer partitions in the 24 bp pattern
# for testing
from python.assignment_1 import naive_2mm
hit_counts = 0
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
hit_counts += 1
print('Indexed hit counts: ', hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)))
t = ''.join(read_fastq('data/week_2_hw.fasta')[0])
build_index_and_call_pattern('GGCGCGGTGGCTCACGCCTGTAAT', t)
def build_index_and_call_pattern(p, t):
# create an index of 8-mers for the text
index = Index(t, 8)
# now for each 8 mer in a length 24 pattern we will query the data
# we are allowing up to 2 mismatches, so we must match at least one
# of the 3 8-mer partitions in the 24 bp pattern
# for testing
from python.assignment_1 import naive_2mm
hit_counts = 0
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
# print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
# print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
hit_counts += 1
print('Indexed hit counts: ', hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)))
t = ''.join(read_fastq('data/week_2_hw.fasta')[0])
build_index_and_call_pattern('GGCGCGGTGGCTCACGCCTGTAAT', t)
def build_index_and_call_pattern(p, t):
# create an index of 8-mers for the text
index = Index(t, 8)
# now for each 8 mer in a length 24 pattern we will query the data
# we are allowing up to 2 mismatches, so we must match at least one
# of the 3 8-mer partitions in the 24 bp pattern
# for testing
from python.assignment_1 import naive_2mm
hit_counts = 0
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
# print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
# print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
hit_counts += 1
print('Indexed hit counts: ', hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)))
t = ''.join(read_fastq('data/week_2_hw.fasta')[0])
build_index_and_call_pattern('GGCGCGGTGGCTCACGCCTGTAAT', t)
def build_index_and_call_pattern(p, t):
# create an index of 8-mers for the text
index = Index(t, 8)
# now for each 8 mer in a length 24 pattern we will query the data
# we are allowing up to 2 mismatches, so we must match at least one
# of the 3 8-mer partitions in the 24 bp pattern
# for testing
from python.assignment_1 import naive_2mm
verified_hit_counts = 0
kmer_in_index = False
for i in range(0, 24-8, 8):
kmer = p[i:i+8]
res = index.query(kmer)
# print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
# print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24])) >= 1:
verified_hit_counts += 1
print('Verified indexed hit counts: ', verified_hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)))
t = ''.join(read_fastq('data/week_2_hw.fasta')[0])
build_index_and_call_pattern('GGCGCGGTGGCTCACGCCTGTAAT', t)
class SubseqIndex(object):
""" Holds a subsequence index for a text T """
def __init__(self, t, k, ival):
""" Create index from all subsequences consisting of k characters
spaced ival positions apart.  E.g., SubseqIndex("ATAT", 2, 2)
extracts ("AA", 0) and ("TT", 1). """
self.k = k  # num characters per subsequence extracted
self.ival = ival  # space between them; 1=adjacent, 2=every other, etc
self.index = []
self.span = 1 + ival * (k - 1)
for i in range(len(t) - self.span + 1):  # for each subseq
self.index.append((t[i:i+self.span:ival], i))  # add (subseq, offset)
self.index.sort()  # alphabetize by subseq
def query(self, p):
""" Return index hits for first subseq of p """
subseq = p[:self.span:self.ival]  # query with first subseq
i = bisect.bisect_left(self.index, (subseq, -1))  # binary search
hits = []
while i < len(self.index):  # collect matching index entries
if self.index[i][0] != subseq:
break
hits.append(self.index[i][1])
i += 1
return hits
p
p = ''.join([random.choice('ACGT') for _ in range(24)])
p
p[0:24:3]
p[1:24:3]
p[2:24:3]
index = SubseqIndex(t, 8, 3)
verified_hit_counts = 0
kmer_in_index = False
for i in range(0, 3):
kmer = p[i:24:3]
res = index.query(kmer)
# print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
# print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:24:3])) >= 1:
verified_hit_counts += 1
print('Verified indexed hit counts: ', verified_hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)))
p = t[0:24]
index = SubseqIndex(t, 8, 3)
verified_hit_counts = 0
kmer_in_index = False
for i in range(0, 3):
kmer = p[i:24:3]
res = index.query(kmer)
# print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
# print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:24:3])) >= 1:
verified_hit_counts += 1
print('Verified indexed hit counts: ', verified_hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)))
index = SubseqIndex(t, 8, 3)
verified_hit_counts = 0
kmer_in_index = False
for i in range(0, 3):
kmer = p[i:24:3]
res = index.query(kmer)
# print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
# print(t[ind:ind+24])
if len(naive_2mm(p, t[ind:ind+24:3])) >= 1:
verified_hit_counts += 1
print('Verified indexed hit counts: ', verified_hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)))
index = SubseqIndex(t, 8, 3)
verified_hit_counts = 0
kmer_in_index = False
for i in range(0, 3):
kmer = p[i:24:3]
res = index.query(kmer)
# print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[t[ind:ind+24:3]])
if len(naive_2mm(p, t[ind:ind+24:3])) >= 1:
verified_hit_counts += 1
print('Verified indexed hit counts: ', verified_hit_counts)
print('Naive hit counts: ', len(naive_2mm(p, t)))
p
p = t[0:24]
p[0:24:3]
index.query(p[0:24:3])
index = SubseqIndex(t, 8, 3)
index
ind = SubseqIndex('ATATAT', 3, 2)
print(ind.index)
index.inde
index.index
index.index[0:3]
index = SubseqIndex(t, 8, 3)
verified_hit_counts = 0
kmer_in_index = False
for i in range(0, 3):
kmer = p[i:24:3]
res = index.query(kmer)
# print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[ind:ind+24:3]])
if len(naive_2mm(p, t[ind:ind+24:3])) >= 1:
verified_hit_counts += 1
\
p = t[0:24]
verified_hit_counts = 0
kmer_in_index = False
for i in range(0, 3):
kmer = p[i:24+3:3]
res = index.query(kmer)
# print(res)
if len(res) >= 1:
print(p)
for match_ind in res:
# verify match
ind = match_ind-i
print(t[ind:ind+24:3]])
if len(naive_2mm(p, t[ind:ind+24:3])) >= 1:
verified_hit_counts += 1
kmer_in_index = False
for i in range(0, 3):
kmer = p[i:24+3:3]
res = index.query(kmer)
print(res)
# if len(res) >= 1:
#   print(p)
#   for match_ind in res:
#     # verify match
#     ind = match_ind-i
#     print(t[ind:ind+24:3]])
#     if len(naive_2mm(p, t[ind:ind+24:3])) >= 1:
#       verified_hit_counts += 1
p[0:24+3:3]
len(p[0:24+3:3])
for i in range(0, 3):
kmer = p[i:24:3]
res = index.query(kmer)
print(res)
p[0:24:3]
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
